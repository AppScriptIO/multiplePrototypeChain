"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _assert = _interopRequireDefault(require("assert"));





var _script = require("../source/script.js");

suite('Multiple Prototype Chain creation', () => {
  suiteSetup(() => {});

  suite('Create new chain with proxied prototypes', () => {
    class Superclass {}
    Superclass.prototype.meta = { Class: 'Superclass' };
    class Class extends Superclass {}
    Class.prototype.meta = { Class: 'Class' };
    class Subclass extends Class {}
    Subclass.prototype.meta = { Class: 'Subclass' };

    let oldInstance = new Subclass();
    oldInstance.x = 'x';
    let newInstance = _script.MultiplePrototypeChain.createUniqueProtoChain({ object: oldInstance });

    test('Get properties - Preserve properties of original instance and original prototypes', () => {
      _assert.default.strictEqual(newInstance.x, oldInstance.x);
      _assert.default.strictEqual(newInstance.meta.Class, 'Subclass');
      _assert.default.strictEqual(newInstance.__proto__.meta.Class, 'Subclass');
      _assert.default.strictEqual(newInstance.__proto__.__proto__.meta.Class, 'Class');
      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.meta.Class, 'Superclass');
    });

    test('Set properties - Should be able to set properties through the proxy', () => {
      newInstance.t = 't';
      _assert.default.strictEqual(newInstance.t, 't');
      _assert.default.strictEqual(newInstance.delegatedPrototype.t, 't');
    });

    test('In operator should check in the delegatedPrototype', () => {
      newInstance.b = 'b';
      _assert.default.strictEqual('b' in newInstance, true);
    });

    test('create new prototypes with corresponding delegatedPrototypes values equal to original proto chain', () => {

      _assert.default.strictEqual(newInstance.__proto__.delegatedPrototype, oldInstance.__proto__);

      _assert.default.strictEqual(newInstance.__proto__.__proto__.delegatedPrototype, oldInstance.__proto__.__proto__);

      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.delegatedPrototype, oldInstance.__proto__.__proto__.__proto__);

      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.__proto__, oldInstance.__proto__.__proto__.__proto__.__proto__);

      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.__proto__.__proto__, oldInstance.__proto__.__proto__.__proto__.__proto__.__proto__);
    });
  });

  suite('Insert object to prototypechain', () => {
    class Superclass {}
    Superclass.prototype.meta = { Class: 'Superclass' };
    class Class extends Superclass {}
    Class.prototype.meta = { Class: 'Class' };
    class Subclass extends Class {}
    Subclass.prototype.meta = { Class: 'Subclass' };

    let oldInstance = new Subclass();


    oldInstance.__proto__ = { delegatedPrototype: Subclass.prototype };
    oldInstance.__proto__.__proto__ = { delegatedPrototype: Class.prototype };
    oldInstance.__proto__.__proto__.__proto__ = { delegatedPrototype: Superclass.prototype };
    oldInstance.__proto__.__proto__.__proto__.__proto__ = Superclass.prototype.__proto__;

    let objectToAdd = { x: 'x' };
    let newInstance = _script.MultiplePrototypeChain.insertObjectToPrototypeChain({
      prototypeChain: oldInstance,
      objectToAdd: objectToAdd,
      beforePrototype: Superclass.prototype });


    test('Object should be added as delegatedPrototype inside a pointerPrototype in specified place preserving previous chain prototypes', () => {
      _assert.default.strictEqual(newInstance.__proto__.delegatedPrototype, Subclass.prototype);
      _assert.default.strictEqual(newInstance.__proto__.__proto__.delegatedPrototype, Class.prototype);
      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.delegatedPrototype, objectToAdd);
      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.__proto__.delegatedPrototype, Superclass.prototype);
      _assert.default.strictEqual(newInstance.__proto__.__proto__.__proto__.__proto__.__proto__, Superclass.prototype.__proto__);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,