"use strict";var _proxyTrapAproach = require("../../source/proxyTrapApproach/proxyTrapAproach.js");


{
  class A {
    constructor(x) {
      this.A = x;
    }}


  class B extends A {
    constructor(x, y) {
      super(y);
      this.B = x;
    }}


  class _C {
    constructor(x) {
      this.C = x;
    }}

  const C = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_C, [B]);

  const a = new A(1);
  console.log(a);
  console.log(a.A);

  const b = new B(2, 1);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C([3], [[2, 1]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}


{
  class A {
    constructor(x) {
      this.A = x;
    }}


  class _B {
    constructor(x) {
      this.B = x;
    }}

  const B = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_B, [A]);

  class C extends B {
    constructor(x, y, z) {
      super(y, z);
      this.C = x;
    }}


  const a = new A(1);
  console.log(a);
  console.log(a.A);

  const b = new B([2], [[1]]);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C(3, [2], [[1]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}


{
  class _A {
    constructor(x) {
      this.A = x;
    }}

  const A = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_A, []);

  class _B {
    constructor(x) {
      this.B = x;
    }}

  const B = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_B, [A]);

  class _C {
    constructor(x) {
      this.C = x;
    }}

  const C = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_C, [B]);

  const a = new A([1], []);
  console.log(a);
  console.log(a.A);

  const b = new B([2], [[[1]]]);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C([3], [[[2], [[[1]]]]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvcHJveHlBcHByb2FjaC90ZXN0LmluaGVyaXRzLW11bHRpcGxlLWNvbnN0cnVjdG9ycy5qcyJdLCJuYW1lcyI6WyJBIiwiY29uc3RydWN0b3IiLCJ4IiwiQiIsInkiLCJfQyIsIkMiLCJhIiwiY29uc29sZSIsImxvZyIsImIiLCJjIiwiX0IiLCJ6IiwiX0EiXSwibWFwcGluZ3MiOiJhQUFBOzs7QUFHQTtBQUNFLFFBQU1BLENBQU4sQ0FBUTtBQUNOQyxJQUFBQSxXQUFXLENBQUNDLENBQUQsRUFBSTtBQUNiLFdBQUtGLENBQUwsR0FBU0UsQ0FBVDtBQUNELEtBSEs7OztBQU1SLFFBQU1DLENBQU4sU0FBZ0JILENBQWhCLENBQWtCO0FBQ2hCQyxJQUFBQSxXQUFXLENBQUNDLENBQUQsRUFBSUUsQ0FBSixFQUFPO0FBQ2hCLFlBQU1BLENBQU47QUFDQSxXQUFLRCxDQUFMLEdBQVNELENBQVQ7QUFDRCxLQUplOzs7QUFPbEIsUUFBTUcsRUFBTixDQUFTO0FBQ1BKLElBQUFBLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFJO0FBQ2IsV0FBS0ksQ0FBTCxHQUFTSixDQUFUO0FBQ0QsS0FITTs7QUFLVCxRQUFNSSxDQUFDLEdBQUcsb0RBQTZCRCxFQUE3QixFQUFpQyxDQUFDRixDQUFELENBQWpDLENBQVY7O0FBRUEsUUFBTUksQ0FBQyxHQUFHLElBQUlQLENBQUosQ0FBTSxDQUFOLENBQVY7QUFDQVEsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLENBQVo7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLENBQUMsQ0FBQ1AsQ0FBZDs7QUFFQSxRQUFNVSxDQUFDLEdBQUcsSUFBSVAsQ0FBSixDQUFNLENBQU4sRUFBUyxDQUFULENBQVY7QUFDQUssRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLENBQVo7QUFDQUYsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLENBQUMsQ0FBQ1YsQ0FBZDtBQUNBUSxFQUFBQSxPQUFPLENBQUND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LENBQUMsR0FBRyxvREFBNkJELEVBQTdCLEVBQWlDLENBQUNGLENBQUQsQ0FBakMsQ0FBVjs7QUFFQSxRQUFNSSxDQUFDLEdBQUcsSUFBSVAsQ0FBSixDQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVcsRUFBWCxDQUFWO0FBQ0FRLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixDQUFaO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixDQUFDLENBQUNQLENBQWQ7O0FBRUEsUUFBTVUsQ0FBQyxHQUFHLElBQUlQLENBQUosQ0FBTSxDQUFDLENBQUQsQ0FBTixFQUFXLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFELENBQVgsQ0FBVjtBQUNBSyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsQ0FBWjtBQUNBRixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsQ0FBQyxDQUFDVixDQUFkO0FBQ0FRLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxDQUFDLENBQUNQLENBQWQ7O0FBRUEsUUFBTVEsQ0FBQyxHQUFHLElBQUlMLENBQUosQ0FBTSxDQUFDLENBQUQsQ0FBTixFQUFXLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxFQUFNLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRCxDQUFELENBQU4sQ0FBRCxDQUFYLENBQVY7QUFDQUUsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlFLENBQVo7QUFDQUgsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlFLENBQUMsQ0FBQ1gsQ0FBZDtBQUNBUSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsQ0FBQyxDQUFDUixDQUFkO0FBQ0FLLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxDQUFDLENBQUNMLENBQWQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluaGVyaXRzTXVsdGlwbGVDb25zdHJ1Y3RvcnMgfSBmcm9tICcuLi8uLi9zb3VyY2UvcHJveHlUcmFwQXBwcm9hY2gvcHJveHlUcmFwQXByb2FjaC5qcydcblxuLy8gQyAtPj4gQiAtPiBBXG57XG4gIGNsYXNzIEEge1xuICAgIGNvbnN0cnVjdG9yKHgpIHtcbiAgICAgIHRoaXMuQSA9IHhcbiAgICB9XG4gIH1cblxuICBjbGFzcyBCIGV4dGVuZHMgQSB7XG4gICAgY29uc3RydWN0b3IoeCwgeSkge1xuICAgICAgc3VwZXIoeSlcbiAgICAgIHRoaXMuQiA9IHhcbiAgICB9XG4gIH1cblxuICBjbGFzcyBfQyB7XG4gICAgY29uc3RydWN0b3IoeCkge1xuICAgICAgdGhpcy5DID0geFxuICAgIH1cbiAgfVxuICBjb25zdCBDID0gaW5oZXJpdHNNdWx0aXBsZUNvbnN0cnVjdG9ycyhfQywgW0JdKVxuXG4gIGNvbnN0IGEgPSBuZXcgQSgxKVxuICBjb25zb2xlLmxvZyhhKVxuICBjb25zb2xlLmxvZyhhLkEpXG5cbiAgY29uc3QgYiA9IG5ldyBCKDIsIDEpXG4gIGNvbnNvbGUubG9nKGIpXG4gIGNvbnNvbGUubG9nKGIuQSlcbiAgY29uc29sZS5sb2coYi5CKVxuXG4gIGNvbnN0IGMgPSBuZXcgQyhbM10sIFtbMiwgMV1dKVxuICBjb25zb2xlLmxvZyhjKVxuICBjb25zb2xlLmxvZyhjLkEpXG4gIGNvbnNvbGUubG9nKGMuQilcbiAgY29uc29sZS5sb2coYy5DKVxufVxuXG4vLyBDIC0+IEIgLT4+IEFcbntcbiAgY2xhc3MgQSB7XG4gICAgY29uc3RydWN0b3IoeCkge1xuICAgICAgdGhpcy5BID0geFxuICAgIH1cbiAgfVxuXG4gIGNsYXNzIF9CIHtcbiAgICBjb25zdHJ1Y3Rvcih4KSB7XG4gICAgICB0aGlzLkIgPSB4XG4gICAgfVxuICB9XG4gIGNvbnN0IEIgPSBpbmhlcml0c011bHRpcGxlQ29uc3RydWN0b3JzKF9CLCBbQV0pXG5cbiAgY2xhc3MgQyBleHRlbmRzIEIge1xuICAgIGNvbnN0cnVjdG9yKHgsIHksIHopIHtcbiAgICAgIHN1cGVyKHksIHopXG4gICAgICB0aGlzLkMgPSB4XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYSA9IG5ldyBBKDEpXG4gIGNvbnNvbGUubG9nKGEpXG4gIGNvbnNvbGUubG9nKGEuQSlcblxuICBjb25zdCBiID0gbmV3IEIoWzJdLCBbWzFdXSlcbiAgY29uc29sZS5sb2coYilcbiAgY29uc29sZS5sb2coYi5BKVxuICBjb25zb2xlLmxvZyhiLkIpXG5cbiAgY29uc3QgYyA9IG5ldyBDKDMsIFsyXSwgW1sxXV0pXG4gIGNvbnNvbGUubG9nKGMpXG4gIGNvbnNvbGUubG9nKGMuQSlcbiAgY29uc29sZS5sb2coYy5CKVxuICBjb25zb2xlLmxvZyhjLkMpXG59XG5cbi8vIEMgLT4+IEIgLT4+IEFcbntcbiAgY2xhc3MgX0Ege1xuICAgIGNvbnN0cnVjdG9yKHgpIHtcbiAgICAgIHRoaXMuQSA9IHhcbiAgICB9XG4gIH1cbiAgY29uc3QgQSA9IGluaGVyaXRzTXVsdGlwbGVDb25zdHJ1Y3RvcnMoX0EsIFtdKVxuXG4gIGNsYXNzIF9CIHtcbiAgICBjb25zdHJ1Y3Rvcih4KSB7XG4gICAgICB0aGlzLkIgPSB4XG4gICAgfVxuICB9XG4gIGNvbnN0IEIgPSBpbmhlcml0c011bHRpcGxlQ29uc3RydWN0b3JzKF9CLCBbQV0pXG5cbiAgY2xhc3MgX0Mge1xuICAgIGNvbnN0cnVjdG9yKHgpIHtcbiAgICAgIHRoaXMuQyA9IHhcbiAgICB9XG4gIH1cbiAgY29uc3QgQyA9IGluaGVyaXRzTXVsdGlwbGVDb25zdHJ1Y3RvcnMoX0MsIFtCXSlcblxuICBjb25zdCBhID0gbmV3IEEoWzFdLCBbXSlcbiAgY29uc29sZS5sb2coYSlcbiAgY29uc29sZS5sb2coYS5BKVxuXG4gIGNvbnN0IGIgPSBuZXcgQihbMl0sIFtbWzFdXV0pXG4gIGNvbnNvbGUubG9nKGIpXG4gIGNvbnNvbGUubG9nKGIuQSlcbiAgY29uc29sZS5sb2coYi5CKVxuXG4gIGNvbnN0IGMgPSBuZXcgQyhbM10sIFtbWzJdLCBbW1sxXV1dXV0pXG4gIGNvbnNvbGUubG9nKGMpXG4gIGNvbnNvbGUubG9nKGMuQSlcbiAgY29uc29sZS5sb2coYy5CKVxuICBjb25zb2xlLmxvZyhjLkMpXG59XG4iXX0=