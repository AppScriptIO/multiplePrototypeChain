"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _assert = _interopRequireDefault(require("assert"));





var _script = require("../../source/script.js");

suite('MultipleDelegation Proxy Trap Hanlders:', () => {
  suiteSetup(() => {});

  suite('Proxy traps tests:', () => {
    suite('instanceof', () => {
      let { proxy } = new _script.MultipleDelegation();

      test('instance check returning correctly', () => (0, _assert.default)(proxy instanceof _script.MultipleDelegation, `• proxy should be considered an instance of MultipleDelegation"`));
      test('only immediately created objects must be considered as instances of MultipleDelegation', () =>
      (0, _assert.default)(!(Object.create(proxy) instanceof _script.MultipleDelegation), `• child objects of proxy must not be considered an instance of MultipleDelegation"`));
    });

    suite('getPrototypeOf trap', () => {
      const fixture = { symbol1: Symbol('symbol1'), symbol2: Symbol('symbol2'), key1: 'key1', key2: 'key2' };
      let parent1 = { [fixture.symbol1]: fixture.symbol1, [fixture.key1]: fixture.key1 };
      let parent2 = { [fixture.symbol2]: fixture.symbol2, [fixture.key2]: fixture.key2 };
      const resultFixture = [parent1, parent2];

      let { proxy } = new _script.MultipleDelegation();
      proxy[_script.$.target][_script.$.setter]([parent1, parent2]);

      let prototypeList = Reflect.getPrototypeOf(proxy);


      test('Should return an array of prototypes', () =>
      (0, _assert.default)(prototypeList.every(item => resultFixture.includes(item)) && resultFixture.every(item => prototypeList.includes(item)), `• multiple prorotypes should be returned"`));
    });

    suite('ownKeys trap', () => {
      const fixture = { symbol1: Symbol('symbol1'), symbol2: Symbol('symbol2'), key1: 'key1', key2: 'key2' };
      let parent1 = { [fixture.symbol1]: fixture.symbol1, [fixture.key1]: fixture.key1 };
      let parent2 = { [fixture.symbol2]: fixture.symbol2, [fixture.key2]: fixture.key2 };
      const resultFixture = [...Reflect.ownKeys(Object.assign({}, parent1, parent2)), ..._script.MultipleDelegation.debugging.keyUsedOnTargetInstance];

      let { proxy } = new _script.MultipleDelegation();
      proxy[_script.$.target][_script.$.setter]([parent1, parent2]);

      let keyList = Reflect.ownKeys(proxy);


      test('Both string and symbol properties must be returned', () =>
      (0, _assert.default)(keyList.every(item => resultFixture.includes(item)) && resultFixture.every(item => keyList.includes(item)), `• returned ownKeys must include symbols and string names"`));

      test('Circular lookup should pass', () => {

        proxy[_script.$.target][_script.$.list].unshift(proxy);
        let objectDelegatingToProxy = Object.setPrototypeOf(Object.create(null), proxy);
        proxy[_script.$.target][_script.$.list].unshift(objectDelegatingToProxy);
        let keyList = [];
        keyList = Reflect.ownKeys(proxy);
        (0, _assert.default)(keyList.every(item => resultFixture.includes(item)) && resultFixture.every(item => keyList.includes(item)), `• returned ownKeys must include symbols and string names"`);
      });
    });

    suite('getOwnPropertyDescriptor trap', () => {var _Object$getOwnPropert;
      const fixture = { symbol1: Symbol('symbol1'), symbol2: Symbol('symbol2'), key1: 'key1', key2: 'key2' };
      let parent1 = { [fixture.symbol1]: fixture.symbol1, [fixture.key1]: fixture.key1 };
      let parent2 = { [fixture.symbol2]: fixture.symbol2, [fixture.key2]: fixture.key2 };
      const resultFixture = [...Reflect.ownKeys(Object.assign({}, parent1, parent2)), ..._script.MultipleDelegation.debugging.keyUsedOnTargetInstance];

      let { proxy } = new _script.MultipleDelegation();
      proxy[_script.$.target][_script.$.setter]([parent1, parent2]);

      let keyList = (_Object$getOwnPropert = Object.getOwnPropertyDescriptors(proxy), Reflect.ownKeys(_Object$getOwnPropert));


      test('symbols and string keys must be returned', () =>
      (0, _assert.default)(keyList.every(item => resultFixture.includes(item)) && resultFixture.every(item => keyList.includes(item)), `• returned ownKeys must include symbols and string names only"`));

      test('Circular lookup should pass', () => {var _Object$getOwnPropert2;

        proxy[_script.$.target][_script.$.list].unshift(proxy);
        let objectDelegatingToProxy = Object.setPrototypeOf(Object.create(null), proxy);
        proxy[_script.$.target][_script.$.list].unshift(objectDelegatingToProxy);
        let keyList = (_Object$getOwnPropert2 = Object.getOwnPropertyDescriptors(proxy), Reflect.ownKeys(_Object$getOwnPropert2));
        (0, _assert.default)(keyList.every(item => resultFixture.includes(item)) && resultFixture.every(item => keyList.includes(item)), `• returned ownKeys must include symbols and string names"`);
      });
    });

    suite('has trap', () => {
      const fixture = { symbol1: Symbol('symbol1'), symbol2: Symbol('symbol2'), key1: 'key1', key2: 'key2' };
      let parent1 = { [fixture.symbol1]: fixture.symbol1, [fixture.key1]: fixture.key1 };
      let parent2 = { [fixture.symbol2]: fixture.symbol2, [fixture.key2]: fixture.key2 };
      const resultFixture = [...Reflect.ownKeys(Object.assign({}, parent1, parent2)), ..._script.MultipleDelegation.debugging.keyUsedOnTargetInstance];

      let { proxy } = new _script.MultipleDelegation();
      proxy[_script.$.target][_script.$.setter]([parent1, parent2]);

      test('Should check properties existence:', () => {
        (0, _assert.default)(
        resultFixture.every(value => Reflect.has(proxy, value)),
        `• existing properties were not found"`);

        (0, _assert.default)(!Reflect.has(proxy, 'nonExistingKey'), `• nonexisting property check failed`);
      });

      test('Circular lookup should pass', () => {

        proxy[_script.$.target][_script.$.list].unshift(proxy);
        let objectDelegatingToProxy = Object.setPrototypeOf(Object.create(null), proxy);
        proxy[_script.$.target][_script.$.list].unshift(objectDelegatingToProxy);
        (0, _assert.default)(
        resultFixture.every(value => Reflect.has(proxy, value)),
        `• existing properties were not found"`);

        (0, _assert.default)(!Reflect.has(proxy, 'nonExistingKey'), `• nonexisting property check failed`);
      });
    });

    suite('get trap', () => {
      const fixture = { symbol1: Symbol('symbol1'), symbol2: Symbol('symbol2'), key1: 'key1', key2: 'key2' };
      let parent1 = { [fixture.symbol1]: fixture.symbol1, [fixture.key1]: fixture.key1 };
      let parent2 = { [fixture.symbol2]: fixture.symbol2, [fixture.key2]: fixture.key2 };
      const resultFixture = {
        key: [...Reflect.ownKeys(Object.assign({}, parent1, parent2))],
        value: Object.assign({}, parent1, parent2),
        target: {
          key: _script.MultipleDelegation.debugging.keyUsedOnTargetInstance } };



      let { target, proxy } = new _script.MultipleDelegation();
      proxy[_script.$.target][_script.$.setter]([parent1, parent2]);

      test('Should retrieve properties from the different prototypes:', () => {
        (0, _assert.default)(
        resultFixture.key.every(key => resultFixture.value[key] === Reflect.get(proxy, key)),
        `• existing properties were not retrieved"`);

        (0, _assert.default)(
        resultFixture.target.key.every(key => Reflect.get(proxy, key)),
        `• existing properties of multipleDelegation target directly were not retrieved"`);

        (0, _assert.default)(Reflect.get(proxy, 'nonExistingKey') == undefined, `• nonexisting property retrieval should return undefined`);
      });

      test('Circular lookup should pass', () => {

        proxy[_script.$.target][_script.$.list].unshift(proxy);
        let objectDelegatingToProxy = Object.setPrototypeOf({ label: 'intermediate parent' }, proxy);
        proxy[_script.$.target][_script.$.list].unshift(objectDelegatingToProxy);
        (0, _assert.default)(
        resultFixture.key.every(key => resultFixture.value[key] === Reflect.get(proxy, key)),
        `• existing properties were not retrieved"`);

        (0, _assert.default)(
        resultFixture.target.key.every(key => Reflect.get(proxy, key)),
        `• existing properties of multipleDelegation target directly were not retrieved"`);

        (0, _assert.default)(Reflect.get(proxy, 'nonExistingKey') == undefined, `• nonexisting property retrieval should return undefined`);
      });
    });
  });
});

suite('MultipleDelegation API - Multiple Prototype Chain creation', () => {
  suite('Accessing property through getters (prevent infinite getter lookup)', () => {
    let instance = { label: 'instance' },
    parent = { label: 'parent', value: 'value' };

    Object.setPrototypeOf(instance, parent);





    _script.MultipleDelegation.addDelegation({
      targetObject: instance,
      delegationList: [instance, Object.create(instance), parent] });


    test('Ensure no infinite lookup of property in the hierarchy is being executed', () => {
      try {var _instance;
        instance.nonExistingProperty;
        instance.constructor;
        Object.getOwnPropertyDescriptors(instance);
        Object.getOwnPropertyDescriptors((_instance = instance, Object.getPrototypeOf(_instance)));
        (0, _assert.default)(instance.label === 'instance', `• Property lookup failed for "label"`);
        (0, _assert.default)(instance.value === 'value', `• Property lookup failed for "value"`);
      } catch (error) {
        console.log('• Error: Getter lookup caused infinite loop.');
        throw error;
      }
    });
    test('Ensure lookup in prototype list works', () => {
      (0, _assert.default)(instance.label === 'instance', `• Property lookup failed for "label"`);
      (0, _assert.default)(instance.value === 'value', `• Property lookup failed for "value"`);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,