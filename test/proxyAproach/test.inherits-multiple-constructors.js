"use strict";var _proxyTrapAproach = require("../../source/proxyTrapApproach/proxyTrapAproach.js");


{
  class A {
    constructor(x) {
      this.A = x;
    }}


  class B extends A {
    constructor(x, y) {
      super(y);
      this.B = x;
    }}


  class _C {
    constructor(x) {
      this.C = x;
    }}

  const C = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_C, [B]);

  const a = new A(1);
  console.log(a);
  console.log(a.A);

  const b = new B(2, 1);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C([3], [[2, 1]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}


{
  class A {
    constructor(x) {
      this.A = x;
    }}


  class _B {
    constructor(x) {
      this.B = x;
    }}

  const B = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_B, [A]);

  class C extends B {
    constructor(x, y, z) {
      super(y, z);
      this.C = x;
    }}


  const a = new A(1);
  console.log(a);
  console.log(a.A);

  const b = new B([2], [[1]]);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C(3, [2], [[1]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}


{
  class _A {
    constructor(x) {
      this.A = x;
    }}

  const A = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_A, []);

  class _B {
    constructor(x) {
      this.B = x;
    }}

  const B = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_B, [A]);

  class _C {
    constructor(x) {
      this.C = x;
    }}

  const C = (0, _proxyTrapAproach.inheritsMultipleConstructors)(_C, [B]);

  const a = new A([1], []);
  console.log(a);
  console.log(a.A);

  const b = new B([2], [[[1]]]);
  console.log(b);
  console.log(b.A);
  console.log(b.B);

  const c = new C([3], [[[2], [[[1]]]]]);
  console.log(c);
  console.log(c.A);
  console.log(c.B);
  console.log(c.C);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rlc3QvcHJveHlBcHJvYWNoL3Rlc3QuaW5oZXJpdHMtbXVsdGlwbGUtY29uc3RydWN0b3JzLmpzIl0sIm5hbWVzIjpbIkEiLCJjb25zdHJ1Y3RvciIsIngiLCJCIiwieSIsIl9DIiwiQyIsImEiLCJjb25zb2xlIiwibG9nIiwiYiIsImMiLCJfQiIsInoiLCJfQSJdLCJtYXBwaW5ncyI6ImFBQUE7OztBQUdBO0FBQ0UsUUFBTUEsQ0FBTixDQUFRO0FBQ05DLElBQUFBLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFJO0FBQ2IsV0FBS0YsQ0FBTCxHQUFTRSxDQUFUO0FBQ0QsS0FISzs7O0FBTVIsUUFBTUMsQ0FBTixTQUFnQkgsQ0FBaEIsQ0FBa0I7QUFDaEJDLElBQUFBLFdBQVcsQ0FBQ0MsQ0FBRCxFQUFJRSxDQUFKLEVBQU87QUFDaEIsWUFBTUEsQ0FBTjtBQUNBLFdBQUtELENBQUwsR0FBU0QsQ0FBVDtBQUNELEtBSmU7OztBQU9sQixRQUFNRyxFQUFOLENBQVM7QUFDUEosSUFBQUEsV0FBVyxDQUFDQyxDQUFELEVBQUk7QUFDYixXQUFLSSxDQUFMLEdBQVNKLENBQVQ7QUFDRCxLQUhNOztBQUtULFFBQU1JLENBQUMsR0FBRyxvREFBNkJELEVBQTdCLEVBQWlDLENBQUNGLENBQUQsQ0FBakMsQ0FBVjs7QUFFQSxRQUFNSSxDQUFDLEdBQUcsSUFBSVAsQ0FBSixDQUFNLENBQU4sQ0FBVjtBQUNBUSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBWjtBQUNBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUYsQ0FBQyxDQUFDUCxDQUFkOztBQUVBLFFBQU1VLENBQUMsR0FBRyxJQUFJUCxDQUFKLENBQU0sQ0FBTixFQUFTLENBQVQsQ0FBVjtBQUNBSyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsQ0FBWjtBQUNBRixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsQ0FBQyxDQUFDVixDQUFkO0FBQ0FRLEVBQUFBLE9BQU8sQ0FBQ0Ms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Q0FBQyxHQUFHLG9EQUE2QkQsRUFBN0IsRUFBaUMsQ0FBQ0YsQ0FBRCxDQUFqQyxDQUFWOztBQUVBLFFBQU1JLENBQUMsR0FBRyxJQUFJUCxDQUFKLENBQU0sQ0FBQyxDQUFELENBQU4sRUFBVyxFQUFYLENBQVY7QUFDQVEsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLENBQVo7QUFDQUMsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlGLENBQUMsQ0FBQ1AsQ0FBZDs7QUFFQSxRQUFNVSxDQUFDLEdBQUcsSUFBSVAsQ0FBSixDQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUQsQ0FBWCxDQUFWO0FBQ0FLLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxDQUFaO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxDQUFDLENBQUNWLENBQWQ7QUFDQVEsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlDLENBQUMsQ0FBQ1AsQ0FBZDs7QUFFQSxRQUFNUSxDQUFDLEdBQUcsSUFBSUwsQ0FBSixDQUFNLENBQUMsQ0FBRCxDQUFOLEVBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFELEVBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBRCxDQUFELENBQUQsQ0FBTixDQUFELENBQVgsQ0FBVjtBQUNBRSxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsQ0FBWjtBQUNBSCxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUUsQ0FBQyxDQUFDWCxDQUFkO0FBQ0FRLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRSxDQUFDLENBQUNSLENBQWQ7QUFDQUssRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVlFLENBQUMsQ0FBQ0wsQ0FBZDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5oZXJpdHNNdWx0aXBsZUNvbnN0cnVjdG9ycyB9IGZyb20gJy4uLy4uL3NvdXJjZS9wcm94eVRyYXBBcHByb2FjaC9wcm94eVRyYXBBcHJvYWNoLmpzJ1xuXG4vLyBDIC0+PiBCIC0+IEFcbntcbiAgY2xhc3MgQSB7XG4gICAgY29uc3RydWN0b3IoeCkge1xuICAgICAgdGhpcy5BID0geFxuICAgIH1cbiAgfVxuXG4gIGNsYXNzIEIgZXh0ZW5kcyBBIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICBzdXBlcih5KVxuICAgICAgdGhpcy5CID0geFxuICAgIH1cbiAgfVxuXG4gIGNsYXNzIF9DIHtcbiAgICBjb25zdHJ1Y3Rvcih4KSB7XG4gICAgICB0aGlzLkMgPSB4XG4gICAgfVxuICB9XG4gIGNvbnN0IEMgPSBpbmhlcml0c011bHRpcGxlQ29uc3RydWN0b3JzKF9DLCBbQl0pXG5cbiAgY29uc3QgYSA9IG5ldyBBKDEpXG4gIGNvbnNvbGUubG9nKGEpXG4gIGNvbnNvbGUubG9nKGEuQSlcblxuICBjb25zdCBiID0gbmV3IEIoMiwgMSlcbiAgY29uc29sZS5sb2coYilcbiAgY29uc29sZS5sb2coYi5BKVxuICBjb25zb2xlLmxvZyhiLkIpXG5cbiAgY29uc3QgYyA9IG5ldyBDKFszXSwgW1syLCAxXV0pXG4gIGNvbnNvbGUubG9nKGMpXG4gIGNvbnNvbGUubG9nKGMuQSlcbiAgY29uc29sZS5sb2coYy5CKVxuICBjb25zb2xlLmxvZyhjLkMpXG59XG5cbi8vIEMgLT4gQiAtPj4gQVxue1xuICBjbGFzcyBBIHtcbiAgICBjb25zdHJ1Y3Rvcih4KSB7XG4gICAgICB0aGlzLkEgPSB4XG4gICAgfVxuICB9XG5cbiAgY2xhc3MgX0Ige1xuICAgIGNvbnN0cnVjdG9yKHgpIHtcbiAgICAgIHRoaXMuQiA9IHhcbiAgICB9XG4gIH1cbiAgY29uc3QgQiA9IGluaGVyaXRzTXVsdGlwbGVDb25zdHJ1Y3RvcnMoX0IsIFtBXSlcblxuICBjbGFzcyBDIGV4dGVuZHMgQiB7XG4gICAgY29uc3RydWN0b3IoeCwgeSwgeikge1xuICAgICAgc3VwZXIoeSwgeilcbiAgICAgIHRoaXMuQyA9IHhcbiAgICB9XG4gIH1cblxuICBjb25zdCBhID0gbmV3IEEoMSlcbiAgY29uc29sZS5sb2coYSlcbiAgY29uc29sZS5sb2coYS5BKVxuXG4gIGNvbnN0IGIgPSBuZXcgQihbMl0sIFtbMV1dKVxuICBjb25zb2xlLmxvZyhiKVxuICBjb25zb2xlLmxvZyhiLkEpXG4gIGNvbnNvbGUubG9nKGIuQilcblxuICBjb25zdCBjID0gbmV3IEMoMywgWzJdLCBbWzFdXSlcbiAgY29uc29sZS5sb2coYylcbiAgY29uc29sZS5sb2coYy5BKVxuICBjb25zb2xlLmxvZyhjLkIpXG4gIGNvbnNvbGUubG9nKGMuQylcbn1cblxuLy8gQyAtPj4gQiAtPj4gQVxue1xuICBjbGFzcyBfQSB7XG4gICAgY29uc3RydWN0b3IoeCkge1xuICAgICAgdGhpcy5BID0geFxuICAgIH1cbiAgfVxuICBjb25zdCBBID0gaW5oZXJpdHNNdWx0aXBsZUNvbnN0cnVjdG9ycyhfQSwgW10pXG5cbiAgY2xhc3MgX0Ige1xuICAgIGNvbnN0cnVjdG9yKHgpIHtcbiAgICAgIHRoaXMuQiA9IHhcbiAgICB9XG4gIH1cbiAgY29uc3QgQiA9IGluaGVyaXRzTXVsdGlwbGVDb25zdHJ1Y3RvcnMoX0IsIFtBXSlcblxuICBjbGFzcyBfQyB7XG4gICAgY29uc3RydWN0b3IoeCkge1xuICAgICAgdGhpcy5DID0geFxuICAgIH1cbiAgfVxuICBjb25zdCBDID0gaW5oZXJpdHNNdWx0aXBsZUNvbnN0cnVjdG9ycyhfQywgW0JdKVxuXG4gIGNvbnN0IGEgPSBuZXcgQShbMV0sIFtdKVxuICBjb25zb2xlLmxvZyhhKVxuICBjb25zb2xlLmxvZyhhLkEpXG5cbiAgY29uc3QgYiA9IG5ldyBCKFsyXSwgW1tbMV1dXSlcbiAgY29uc29sZS5sb2coYilcbiAgY29uc29sZS5sb2coYi5BKVxuICBjb25zb2xlLmxvZyhiLkIpXG5cbiAgY29uc3QgYyA9IG5ldyBDKFszXSwgW1tbMl0sIFtbWzFdXV1dXSlcbiAgY29uc29sZS5sb2coYylcbiAgY29uc29sZS5sb2coYy5BKVxuICBjb25zb2xlLmxvZyhjLkIpXG4gIGNvbnNvbGUubG9nKGMuQylcbn1cbiJdfQ==