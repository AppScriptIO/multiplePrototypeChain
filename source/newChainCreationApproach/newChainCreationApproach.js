"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MultiplePrototypeChain = void 0;

let self = class MultiplePrototypeChain {
  static newChainOnInstanceCreation({
    Class,
    contextInstance })
  {
    return new Proxy(Class, {
      construct: (target, argumentsList, newConstructorFunc) => {
        let instance = Reflect.construct(target, argumentsList);
        instance = self.createUniqueProtoChain({ object: instance });
        instance = self.insertObjectToPrototypeChain({
          prototypeChain: instance,
          objectToAdd: contextInstance,
          beforePrototype: contextInstance.__proto__.__proto__ });

        return instance;
      } });

  }

  static createUniqueProtoChain({ object = null }) {
    if (object == null || object.constructor == Object || object.constructor == Function) return object;

    let delegatedPrototype = Object.getPrototypeOf(object);
    let nextPointerPrototype = self.createUniqueProtoChain({ object: delegatedPrototype });
    let pointerPrototype = Object.create(nextPointerPrototype);
    if (!pointerPrototype.hasOwnProperty('delegatedPrototype')) {
      Object.defineProperty(pointerPrototype, 'delegatedPrototype', { value: object, writable: true, enumerable: true, configurable: true });
    }
    let proxyHandler = self.handlerMultiplePrototypeChainPattern({ delegatedPrototype: object });
    pointerPrototype = new Proxy(pointerPrototype, proxyHandler);
    return pointerPrototype;
  }

  static handlerMultiplePrototypeChainPattern({ delegatedPrototype }) {
    return {
      get: function (target, property, receiver) {
        switch (property) {
          case 'delegatedPrototype':
            return Reflect.get(target, property);
            break;
          case '__proto__':
            return Object.getPrototypeOf(receiver);
            break;
          default:
            break;}

        if (delegatedPrototype.hasOwnProperty(property)) {
          return Reflect.get(delegatedPrototype, property);
        } else if (Object.getPrototypeOf(target)) {
          return Reflect.get(Object.getPrototypeOf(target), property);
        } else {
          return undefined;
        }
      },
      set: function (target, property, value, receiver) {
        switch (property) {
          case '__proto__':
            return Object.setPrototypeOf(target, value);
            break;
          default:
            return Reflect.set(delegatedPrototype, property, value);
            break;}

      },
      has: function (target, prop) {
        return prop in delegatedPrototype;
      } };

  }


  static insertObjectToPrototypeChain({
    prototypeChain,
    objectToAdd,
    beforePrototype })
  {

    let previousPrototype = prototypeChain;
    let nextPrototype = prototypeChain.__proto__;
    while (nextPrototype && beforePrototype !== nextPrototype.delegatedPrototype) {
      previousPrototype = nextPrototype;
      nextPrototype = nextPrototype.__proto__;
    }
    if (!nextPrototype) throw new Error('â€¢ Couldn`t add object to prototype chain. No matching "beforePrototype" was found.');

    let pointerPrototype = Object.create(nextPrototype);
    if (!pointerPrototype.hasOwnProperty('delegatedPrototype')) {
      Object.defineProperty(pointerPrototype, 'delegatedPrototype', { value: objectToAdd, writable: true, enumerable: true, configurable: true });
    }
    pointerPrototype = new Proxy(
    pointerPrototype,
    self.handlerMultiplePrototypeChainPattern({
      delegatedPrototype: objectToAdd }));


    Object.setPrototypeOf(previousPrototype, pointerPrototype);
    console.log(prototypeChain);
    return prototypeChain;
  }};exports.MultiplePrototypeChain = self;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,