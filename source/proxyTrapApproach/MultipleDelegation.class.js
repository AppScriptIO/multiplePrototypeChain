"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.MultipleDelegation = void 0;var _interceptHandler = require("./interceptHandler.js");
var _reference = require("./reference.js");let _Symbol$hasInstance, _$$setter;_Symbol$hasInstance =













Symbol.hasInstance;_$$setter =







_reference.$.setter;class MultipleDelegation {static [_Symbol$hasInstance](instance) {if (instance && typeof instance == 'object' && Boolean(Reflect.ownKeys(instance).includes(_reference.$.target))) {return Object.getPrototypeOf(instance[_reference.$.target]) === this.prototype;}}[_$$setter](prototype) {
    if (!Array.isArray(prototype)) prototype = [prototype];
    let prototypeList = [...this[_reference.$.list], ...prototype];
    this[_reference.$.list] = [...new Set(prototypeList)];
  }

  constructor(delegationList = []) {

    let target = this;

    target[_reference.$.list] = [];
    target[_reference.$.setter](delegationList);
    target[_reference.$.target] = target;
    let proxy = new Proxy(target, MultipleDelegation.proxyHandler);

    target[_reference.$.metadata] = {
      type: 'Multiple delegation proxy',
      get delegationList() {
        return target[_reference.$.list];
      } };

    return { proxy, target };
  }


  static addDelegation({ targetObject, delegationList = [] }) {var _targetObject, _targetObject2;
    if (delegationList.length == 0) return;

    let currentPrototype = (_targetObject = targetObject, Object.getPrototypeOf(_targetObject));
    delegationList.unshift(currentPrototype);

    if (!(currentPrototype instanceof MultipleDelegation)) {
      let { proxy } = new MultipleDelegation();

      Object.setPrototypeOf(targetObject, proxy);
    }

    let multipleDelegationProxy = (_targetObject2 = targetObject, Object.getPrototypeOf(_targetObject2));
    delegationList = delegationList.filter(item => item && item !== multipleDelegationProxy);
    multipleDelegationProxy[_reference.$.target][_reference.$.setter](delegationList);
  }}exports.MultipleDelegation = MultipleDelegation;MultipleDelegation.proxyHandler = _interceptHandler.proxyHandler;MultipleDelegation.


debugging = {

  get keyUsedOnTargetInstance() {
    let { target } = new MultipleDelegation();
    return Reflect.ownKeys(target);
  } };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,