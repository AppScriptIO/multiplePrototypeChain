"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.delegateToMultipleObject = delegateToMultipleObject;exports.inheritsMultipleConstructors = inheritsMultipleConstructors;exports.inheritsMultiple = inheritsMultiple;
function delegateToMultipleObject({ targetObject, delegationList, proxiedPrototypeType = 'object' }) {








  const proxyHandler = {

    get(target, key, receiver) {
      const parent = delegationList.find(p => Reflect.has(p, key));
      return parent ? Reflect.get(parent, key, receiver) : void 0;
    },

    has: (target, key) => delegationList.some(p => Reflect.has(p, key)),

    set(target, prop, value, receiver) {
      var obj = delegationList.find(obj => prop in obj);
      return Reflect.set(obj || Object.create(null), prop, value, receiver);
    },




    *enumerate(target) {
      yield* this.ownKeys(target);
    },

    ownKeys(target) {
      var hash = Object.create(null);
      for (var obj of delegationList) for (var p in obj) if (!hash[p]) hash[p] = true;
      return Object.getOwnPropertyNames(hash);
    },

    getOwnPropertyDescriptor(target, prop) {
      function getDesc(obj, prop) {
        var desc = Object.getOwnPropertyDescriptor(obj, prop);
        return desc || (obj = Object.getPrototypeOf(obj) ? getDesc(obj, prop) : void 0);
      }
      var obj = delegationList.find(obj => prop in obj);
      var desc = obj ? getDesc(obj, prop) : void 0;
      if (desc) desc.configurable = true;
      return desc;
    },

    preventExtensions: target => false,
    defineProperty: (target, prop, desc) => false };



  let proxyTarget;
  switch (proxiedPrototypeType) {
    case 'function':
      proxyTarget = new Function();
      break;
    case 'object':
    default:
      proxyTarget = Object.create(null);
      break;}

  let proxiedPrototype = new Proxy(proxyTarget, proxyHandler);

  Object.setPrototypeOf(targetObject, proxiedPrototype);
}


function inheritsMultipleConstructors({ BaseCtor, SuperCtors }) {
  return new Proxy(BaseCtor, {
    construct(_, [baseArgs = [], superArgs = []], newTarget) {
      let instance = {};

      instance = SuperCtors.reduce((acc, Ctor, i) => {
        const args = superArgs[i] || [];
        return Object.assign(acc, new Ctor(...args));
      }, instance);

      instance = Object.assign(instance, new BaseCtor(...baseArgs));

      Object.setPrototypeOf(instance, BaseCtor.prototype);
      return instance;
    } });

}


function inheritsMultiple({ BaseCtor, SuperCtors }) {
  delegateToMultipleObject({
    targetObject: BaseCtor.prototype,
    delegationList: SuperCtors.map(Ctor => Ctor.prototype) });


  return inheritsMultipleConstructors({ BaseCtor, SuperCtors });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,