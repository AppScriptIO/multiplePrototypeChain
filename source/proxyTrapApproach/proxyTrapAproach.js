"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.inheritsMultipleConstructors = inheritsMultipleConstructors;exports.inheritsMultiple = inheritsMultiple;exports.MultipleDelegation = exports.$ = void 0;let _Symbol$hasInstance, _$$setter;
const $ = {

  list: Symbol('MultipleDelegation: list'),
  getter: Symbol('MultipleDelegation: getter'),
  setter: Symbol('MultipleDelegation: setter'),

  target: Symbol.for('MultipleDelegation: non proxied target'),
  metadata: Symbol('metadata') };exports.$ = $;_Symbol$hasInstance =












































































Symbol.hasInstance;_$$setter =






















$.setter;class MultipleDelegation {static [_Symbol$hasInstance](instance) {return Boolean(instance[$.target]);}static addDelegation({ targetObject, delegationList = [] }) {var _targetObject, _targetObject2;if (delegationList.length == 0) return;let currentPrototype = (_targetObject = targetObject, Object.getPrototypeOf(_targetObject));if (!delegationList.includes(currentPrototype)) delegationList.unshift(currentPrototype);if (!(currentPrototype instanceof MultipleDelegation)) {let { proxy } = new MultipleDelegation();Object.setPrototypeOf(targetObject, proxy);}let multipleDelegationProxy = (_targetObject2 = targetObject, Object.getPrototypeOf(_targetObject2));multipleDelegationProxy[$.target][$.setter](delegationList);}[_$$setter](prototype) {
    if (!Array.isArray(prototype)) prototype = [prototype];
    this[$.list] = [...this[$.list], ...prototype];
  }

  constructor() {

    let target = this;
    target[$.list] = [];
    target[$.target] = target;
    let proxy = new Proxy(target, MultipleDelegation.proxyHandler);

    target[$.metadata] = {
      type: 'Multiple delegation proxy',
      get delegationList() {
        return target[$.list];
      } };

    return { proxy, target: target };
  }}exports.MultipleDelegation = MultipleDelegation;MultipleDelegation.proxyHandler = { get(target, key, receiver) {if (key in target) return target[key];let delegationList = target[$.list];const parent = delegationList.find(p => Reflect.has(p, key));return parent ? Reflect.get(parent, key, receiver) : void 0;}, has: (target, key) => {let delegationList = target[$.list];return delegationList.some(p => Reflect.has(p, key));}, set(target, prop, value, receiver) {let delegationList = target[$.list];var obj = delegationList.find(obj => prop in obj);return Reflect.set(obj || Object.create(null), prop, value, receiver);}, *enumerate(target) {yield* this.ownKeys(target);}, ownKeys(target) {let delegationList = target[$.list];var hash = Object.create(null);for (var obj of delegationList) for (var p in obj) if (!hash[p]) hash[p] = true;return Object.getOwnPropertyNames(hash);}, getOwnPropertyDescriptor(target, prop) {let delegationList = target[$.list];var obj = delegationList.find(obj => prop in obj);let desc = undefined;if (obj) while (!desc && obj != null) {desc = Object.getOwnPropertyDescriptor(obj, prop);obj = Object.getPrototypeOf(obj);}if (desc) desc.configurable = true;return desc;}, preventExtensions: target => false, defineProperty: (target, prop, desc) => false, getPrototypeOf: target => {return target[$.list];}, setPrototypeOf: (target, prototype) => {target[$.setter](prototype);return true;} };



function inheritsMultipleConstructors({ BaseCtor, SuperCtors }) {
  return new Proxy(BaseCtor, {
    construct(_, [baseArgs = [], superArgs = []], newTarget) {
      let instance = {};

      instance = SuperCtors.reduce((acc, Ctor, i) => {
        const args = superArgs[i] || [];
        return Object.assign(acc, new Ctor(...args));
      }, instance);

      instance = Object.assign(instance, new BaseCtor(...baseArgs));

      Object.setPrototypeOf(instance, BaseCtor.prototype);
      return instance;
    } });

}


function inheritsMultiple({ BaseCtor, SuperCtors }) {
  delegateToMultipleObject({
    targetObject: BaseCtor.prototype,
    delegationList: SuperCtors.map(Ctor => Ctor.prototype) });


  return inheritsMultipleConstructors({ BaseCtor, SuperCtors });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,