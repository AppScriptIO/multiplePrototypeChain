"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.inheritsMultipleConstructors = inheritsMultipleConstructors;exports.inheritsMultiple = inheritsMultiple;exports.MultipleDelegation = void 0;
const $ = {

  list: Symbol('MultipleDelegation: list'),
  getter: Symbol('MultipleDelegation: getter'),
  setter: Symbol('MultipleDelegation: setter'),

  metadata: Symbol('metadata'),
  target: Symbol('non proxied target') };

class MultipleDelegation {































































  constructor() {
    let target = this;
    let proxiedPrototype = new Proxy(target, MultipleDelegation.proxyHandler);

    target[$.metadata] = {
      type: 'Multiple delegation proxy',
      get delegationList() {
        return target[$.getter]();
      } };

    target[$.list] = [];
    target[$.target] = target;
    return { proxiedPrototype, target };
  }


  static addDelegation({ targetObject, delegationList = [] }) {var _targetObject;
    if (delegationList.length == 0) return;
    let currentPrototype = (_targetObject = targetObject, Object.getPrototypeOf(_targetObject)),
    proxiedPrototype;
    debugger;

    if (!(currentPrototype instanceof MultipleDelegation)) {
      let proxied = new MultipleDelegation();
      proxiedPrototype = proxied.proxiedPrototype;
      if (currentPrototype) proxied.target[$.setter](currentPrototype);

      Object.setPrototypeOf(targetObject, proxiedPrototype);
    } else {
      proxiedPrototype = currentPrototype;
    }

    proxiedPrototype[$.target][$.setter](delegationList);
  }}exports.MultipleDelegation = MultipleDelegation;MultipleDelegation.Reference = $;MultipleDelegation.proxyHandler = { get(target, key, receiver) {if (key in target) return target[key];let delegationList = target[$.getter]();const parent = delegationList.find(p => Reflect.has(p, key));return parent ? Reflect.get(parent, key, receiver) : void 0;}, has: (target, key) => {let delegationList = target[$.getter]();return delegationList.some(p => Reflect.has(p, key));}, set(target, prop, value, receiver) {let delegationList = target[$.getter]();var obj = delegationList.find(obj => prop in obj);return Reflect.set(obj || Object.create(null), prop, value, receiver);}, *enumerate(target) {yield* this.ownKeys(target);}, ownKeys(target) {let delegationList = target[$.getter]();var hash = Object.create(null);for (var obj of delegationList) for (var p in obj) if (!hash[p]) hash[p] = true;return Object.getOwnPropertyNames(hash);}, getOwnPropertyDescriptor(target, prop) {let delegationList = target[$.getter]();function getDesc(obj, prop) {var desc = Object.getOwnPropertyDescriptor(obj, prop);return desc || (obj = Object.getPrototypeOf(obj) ? getDesc(obj, prop) : void 0);}var obj = delegationList.find(obj => prop in obj);var desc = obj ? getDesc(obj, prop) : void 0;if (desc) desc.configurable = true;return desc;}, preventExtensions: target => false, defineProperty: (target, prop, desc) => false };


Object.assign(MultipleDelegation.prototype, {
  [$.setter](prototype) {
    if (!Array.isArray(prototype)) prototype = [prototype];
    this[$.list] = [...this[$.list], ...prototype];
  },
  [$.getter]() {
    return this[$.list];
  } });



function inheritsMultipleConstructors({ BaseCtor, SuperCtors }) {
  return new Proxy(BaseCtor, {
    construct(_, [baseArgs = [], superArgs = []], newTarget) {
      let instance = {};

      instance = SuperCtors.reduce((acc, Ctor, i) => {
        const args = superArgs[i] || [];
        return Object.assign(acc, new Ctor(...args));
      }, instance);

      instance = Object.assign(instance, new BaseCtor(...baseArgs));

      Object.setPrototypeOf(instance, BaseCtor.prototype);
      return instance;
    } });

}


function inheritsMultiple({ BaseCtor, SuperCtors }) {
  delegateToMultipleObject({
    targetObject: BaseCtor.prototype,
    delegationList: SuperCtors.map(Ctor => Ctor.prototype) });


  return inheritsMultipleConstructors({ BaseCtor, SuperCtors });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,