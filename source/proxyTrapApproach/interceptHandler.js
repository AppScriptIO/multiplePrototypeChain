"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.proxyHandler = void 0;


var _reference = require("./reference.js");
var _MultipleDelegationClass = require("./MultipleDelegation.class.js");






Reflect.has = new Proxy(Reflect.has, {
  apply(reflectHas, thisArg, [target, key]) {

    let argument;
    if (typeof key === 'object' && Reflect.ownKeys(key).includes(_reference.$.argument)) {
      argument = key;
      ({ key } = argument);
    }

    if (argument) {
      if (target instanceof _MultipleDelegationClass.MultipleDelegation) {

        return proxyHandler.has(target, argument);
      }

      if (Reflect.ownKeys(target).includes(key)) return true;else
      {var _target;
        target = (_target = target, Object.getPrototypeOf(_target));
        return target ? Reflect.has(target, argument) : false;
      }
    }


    return reflectHas(target, key);
  } });


Reflect.get = new Proxy(Reflect.get, {
  apply(reflectGet, thisArg, [target, key, receiver]) {

    let visitedTargetHash, argument;
    if (typeof receiver === 'object' && Reflect.ownKeys(receiver).includes(_reference.$.argument)) {
      argument = receiver;
      ({ visitedTargetHash, receiver } = argument);
    }

    if (argument) {var _target2;
      if (target instanceof _MultipleDelegationClass.MultipleDelegation) {
        return proxyHandler.get(target[_reference.$.target], key, argument);
      }

      if (!visitedTargetHash.has(target) && Reflect.ownKeys(target).includes(key)) return target[key];

      visitedTargetHash.add(target);

      return Reflect.get((_target2 = target, Object.getPrototypeOf(_target2)), key, {
        [_reference.$.argument]: true,
        visitedTargetHash,
        receiver: receiver || target });

    }


    return reflectGet(target, key, receiver || target);
  } });


const proxyHandler = {




  getPrototypeOf: target => {
    return target[_reference.$.list];
  },


  setPrototypeOf: (target, prototype) => {
    target[_reference.$.setter](prototype);
    return true;
  },






  ownKeys(target) {
    let propertyList = new Set(Reflect.ownKeys(target));

    for (let object of target[_reference.$.list]) if (object[_reference.$.target] !== target) propertyList = new Set([...propertyList, ...Reflect.ownKeys(object)]);
    return [...propertyList];
  },







  getOwnPropertyDescriptor(target, property) {
    if (Reflect.ownKeys(target).includes(property)) return Object.getOwnPropertyDescriptor(target, property);

    let object = target[_reference.$.list].find(object => {
      if (object[_reference.$.target] !== target) return [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)].includes(property);
    });

    let descriptor;
    if (object) {
      descriptor = Object.getOwnPropertyDescriptor(object, property);
      descriptor.configurable = true;
    }

    return descriptor ? descriptor : undefined;
  },




  has(target, key) {

    let visitedTargetHash;
    if (typeof key === 'object' && Reflect.ownKeys(key).includes(_reference.$.argument)) {
      let argument = key;
      ({ visitedTargetHash, key } = argument);
    }

    if (Reflect.ownKeys(target).includes(key)) return true;

    visitedTargetHash || (visitedTargetHash = new Set());
    if (visitedTargetHash.has(target)) return false;
    visitedTargetHash.add(target);

    return target[_reference.$.list].some(object => {

      if (object !== target)
      return Reflect.has(object, {
        [_reference.$.argument]: true,
        visitedTargetHash,
        key });

    });
  },





  get(target, key, receiver) {
    if (key == '__proto__') return Reflect.getPrototypeOf(receiver);
    if (key in target) return target[key];

    let visitedTargetHash;
    if (typeof receiver === 'object' && Reflect.ownKeys(receiver).includes(_reference.$.argument)) {
      let argument = receiver;
      ({ visitedTargetHash, receiver } = argument);
    }

    visitedTargetHash || (visitedTargetHash = new Set());
    if (visitedTargetHash.has(target)) return false;
    visitedTargetHash.add(target);
    if (receiver) visitedTargetHash.add(receiver);


    let value;
    for (let index = 0; index < target[_reference.$.list].length; index++) {
      let object = target[_reference.$.list][index];
      if (visitedTargetHash.has(object)) continue;
      if (
      Reflect.has(object, {
        [_reference.$.argument]: true,
        visitedTargetHash: new Set([receiver]),
        key }))


      value = Reflect.get(object, key, {
        [_reference.$.argument]: true,
        visitedTargetHash,
        receiver });


      visitedTargetHash.add(object);

      if (value) return value;
    }

    return void 0;
  },






  set(target, property, value, receiver) {

    let foundObject = target[_reference.$.list].find(object => property in object);
    if (foundObject) Reflect.set(foundObject, property, value, receiver);


    return Reflect.set(target, property, value, receiver);
  },


  defineProperty(target, key, descriptor) {
    return Reflect.defineProperty(...arguments);
  },


  preventExtensions: target => false };exports.proxyHandler = proxyHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,