"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.proxyHandler = void 0;var _reference = require("./reference.js");
var _MultipleDelegationClass = require("./MultipleDelegation.class.js");






Reflect.has = new Proxy(Reflect.has, {
  apply(reflectHas, thisArg, [target, key]) {

    let argument;
    if (typeof target === 'object' && Reflect.ownKeys(target).includes(_reference.$.argument)) {
      argument = target;
      ({ target } = argument);
    }

    if (argument) {
      if (target instanceof _MultipleDelegationClass.MultipleDelegation) return reflectHas(argument, key);

      if (Reflect.ownKeys(target).includes(key)) return true;else
      {var _target;
        argument.target = (_target = target, Object.getPrototypeOf(_target));
        return argument.target ? Reflect.has(argument, key) : false;
      }
    }


    return reflectHas(target, key);
  } });


const proxyHandler = {




  getPrototypeOf: target => {
    return target[_reference.$.list];
  },


  setPrototypeOf: (target, prototype) => {
    target[_reference.$.setter](prototype);
    return true;
  },






  ownKeys(target) {
    let propertyList = new Set(Reflect.ownKeys(target));

    for (let object of target[_reference.$.list]) if (object[_reference.$.target] !== target) propertyList = new Set([...propertyList, ...Reflect.ownKeys(object)]);
    return [...propertyList];
  },







  getOwnPropertyDescriptor(target, property) {
    if (Reflect.ownKeys(target).includes(property)) return Object.getOwnPropertyDescriptor(target, property);

    let object = target[_reference.$.list].find(object => {
      if (object[_reference.$.target] !== target) return [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)].includes(property);
    });

    let descriptor;
    if (object) {
      descriptor = Object.getOwnPropertyDescriptor(object, property);
      descriptor.configurable = true;
    }

    return descriptor ? descriptor : false;
  },


  has(target, key) {

    let visitedTargetHash;
    if (Reflect.ownKeys(target).includes(_reference.$.argument)) {
      let argument = target;
      ({ visitedTargetHash, target } = argument);
    }

    if (Reflect.ownKeys(target).includes(key)) return true;

    visitedTargetHash || (visitedTargetHash = new Set());
    if (visitedTargetHash.has(target)) return false;
    visitedTargetHash.add(target);

    return target[_reference.$.list].some((object) =>
    Reflect.has(
    {
      [_reference.$.argument]: true,
      visitedTargetHash,
      target: object },

    key));


  },





  get(target, key, proxy) {
    if (key in target) return target[key];


    const foundObject = target[_reference.$.list].find(object => {
      if (object === proxy) return false;
      return Reflect.has(
      {
        [_reference.$.argument]: true,
        visitedTargetHash: new Set([proxy]),
        target: object },

      key);

    });
    return foundObject ? foundObject[key] : void 0;
  },






  set(target, property, value, receiver) {

    let foundObject = target[_reference.$.list].find(object => property in object);
    if (foundObject) Reflect.set(foundObject, property, value, receiver);


    return Reflect.set(target, property, value, receiver);
  },


  defineProperty(target, key, descriptor) {
    return Reflect.defineProperty(...arguments);
  },


  preventExtensions: target => false };exports.proxyHandler = proxyHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,